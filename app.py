import os
import requests
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageSendMessage
from linebot.exceptions import InvalidSignatureError
from PIL import Image
from io import BytesIO
import time
import cv2
import numpy as np

app = Flask(__name__, static_url_path='/static')

line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))

ESP32_URL = "https://dcba-2001-b400-e486-791e-9979-5dc4-c584-d4d.ngrok-free.app/stream"

def fetch_frame_from_mjpeg(url, save_as='static/esp32.jpg', min_bytes=10000):
    print("üîÑ Êì∑Âèñ ESP32 ÂΩ±ÂÉè...")
    try:
        os.makedirs("static", exist_ok=True)
        stream = requests.get(url, stream=True, timeout=10)
        bytes_data = b''
        start_time = time.time()

        for chunk in stream.iter_content(chunk_size=1024):
            bytes_data += chunk
            a = bytes_data.find(b'\xff\xd8')
            b = bytes_data.find(b'\xff\xd9')

            if a != -1 and b != -1:
                jpg_data = bytes_data[a:b+2]
                if len(jpg_data) < min_bytes and time.time() - start_time < 3:
                    continue
                img = Image.open(BytesIO(jpg_data))
                img.save(save_as)
                print(f"‚úÖ Â∑≤ÂÑ≤Â≠òÂúñÁâáÂà∞ {save_as}")
                break

        stream.close()
        return save_as
    except Exception as e:
        print(f"‚ùå Êì∑ÂèñÂ§±ÊïóÔºö{e}")
        return None

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    msg = event.message.text.strip()
    print(f"\U0001f464 LINE ‰ΩøÁî®ËÄÖË™™Ôºö{msg}")

    if msg == "Áï´Èù¢":
        image_path = fetch_frame_from_mjpeg(ESP32_URL)
        if image_path and os.path.exists(image_path):
            domain = os.getenv("RENDER_EXTERNAL_HOSTNAME", "‰Ω†ÁöÑÁ∂≤ÂùÄ.onrender.com")
            timestamp = int(time.time())
            image_url = f"https://{domain}/static/esp32.jpg?t={timestamp}"

            image_message = ImageSendMessage(
                original_content_url=image_url,
                preview_image_url=image_url
            )
            line_bot_api.reply_message(event.reply_token, image_message)
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ö†Ô∏è Êì∑ÂèñÂúñÁâáÂ§±Êïó"))

    elif msg == "‰∫∫ËáâËæ®Ë≠ò":
        image_path = fetch_frame_from_mjpeg(ESP32_URL)
        if image_path and os.path.exists(image_path):
            domain = os.getenv("RENDER_EXTERNAL_HOSTNAME", "‰Ω†ÁöÑÁ∂≤ÂùÄ.onrender.com")
            timestamp = int(time.time())
            image_url = f"https://{domain}/static/esp32.jpg?t={timestamp}"

            with open(image_path, 'rb') as img:
                files = {'image': img}
                try:
                    res = requests.post("https://rekognition.onrender.com/recognize", files=files, timeout=10)
                    result = res.json()
                    name = result.get("result", "Ëæ®Ë≠òÂ§±Êïó")
                    sim = result.get("similarity", 0)
                    reply = f"‚úÖ Ëæ®Ë≠òÁµêÊûúÔºö{name}\nÁõ∏‰ººÂ∫¶Ôºö{sim:.2f}%" if sim else name
                except Exception as e:
                    reply = f"‚ùå ÈåØË™§Ôºö{e}"

            image_message = ImageSendMessage(
                original_content_url=image_url,
                preview_image_url=image_url
            )
            text_message = TextSendMessage(text=reply)
            line_bot_api.reply_message(event.reply_token, [image_message, text_message])
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ÁÑ°Ê≥ïÊì∑ÂèñÂúñÁâá"))

elif msg == "ÂÖâÂ≠∏Ëæ®Ë≠ò":
    image_path = fetch_frame_from_mjpeg(ESP32_URL)
    if image_path and os.path.exists(image_path):
        domain = os.getenv("RENDER_EXTERNAL_HOSTNAME", "‰Ω†ÁöÑÁ∂≤ÂùÄ.onrender.com")
        timestamp = int(time.time())
        image_url = f"https://{domain}/static/esp32.jpg?t={timestamp}"

        try:
            with open(image_path, 'rb') as f:
                res = requests.post(
                    'https://api.ocr.space/parse/image',
                    files={'file': f},
                    data={
                        'apikey': 'K89122706188957',
                        'language': 'chi_tra',
                        'isOverlayRequired': False,
                        'OCREngine': 2,
                        'scale': False,
                        'filetype': 'JPG'
                    },
                    timeout=10
                )

            if res.status_code == 200:
                result = res.json()
                if "ParsedResults" in result and result["ParsedResults"]:
                    text = result["ParsedResults"][0]["ParsedText"].strip()
                    if not text:
                        text = "‚ùå ÁÑ°Ê≥ïËæ®Ë≠òÔºàÁµêÊûúÁÇ∫Á©∫Ôºâ"
                else:
                    text = f"‚ùå ÁÑ°Ê≥ïËæ®Ë≠òÔºàParsedResults ‰∏çÂ≠òÂú®Ôºâ\nÂõûÂÇ≥ÂÖßÂÆπÔºö{result}"
            else:
                text = f"‚ùå API ÂõûÂÇ≥ÈåØË™§Á¢º {res.status_code}\nÂõûÊáâÂÖßÂÆπÔºö{res.text}"

        except requests.exceptions.RequestException as e:
            text = f"‚ùå Ë´ãÊ±ÇÈåØË™§Ôºö{str(e)}"
        except Exception as e:
            text = f"‚ùå ‰æãÂ§ñÈåØË™§Ôºö{str(e)}"

        image_message = ImageSendMessage(
            original_content_url=image_url,
            preview_image_url=image_url
        )
        text_message = TextSendMessage(text=text)
        line_bot_api.reply_message(event.reply_token, [image_message, text_message])
    else:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå Êì∑ÂèñÂúñÁâáÂ§±Êïó"))


    else:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‰∏çÂú®Êåá‰ª§ÁØÑÂúçÂÖß"))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
